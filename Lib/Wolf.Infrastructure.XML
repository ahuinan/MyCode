<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wolf.Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Wolf.Infrastructure.Applications.IServiceBase">
            <summary>
            应用服务基类接口
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Applications.IServiceBase`1">
            <summary>
            应用服务基类接口
            </summary>
            <typeparam name="TDto">数据传输对象类型</typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.Applications.ServiceBase">
            <summary>
            应用服务基类
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Applications.ServiceBase`2">
            <summary>
            应用服务基类
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.CacheBase">
            <summary>
            缓存基类
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Caching.CacheBase.Region">
            <summary>
            获取 缓存区域名称，可作为缓存键标识，给缓存管理带来便利
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Get(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.GetAll">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.GetAll``1">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Set(System.String,System.Object)">
            <summary>
            设置缓存对象，使用默认配置
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存对象，缓存时间单位：秒
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Set(System.String,System.Object,System.DateTime)">
            <summary>
            设置缓存对象，设置绝对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存对象</param>
            <param name="absoluteExpiration">绝对过期时间，过了这个时间点，缓存即过期</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存对象，设置相对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="slidingExpiration">滑动过期时间，在此时间内访问缓存，缓存将继续有效</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheBase.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.CacheExtensions">
            <summary>
            缓存扩展辅助操作类
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.CacheLevel">
            <summary>
            缓存级别
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Caching.CacheLevel.First">
            <summary>
            一级缓存
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Caching.CacheLevel.Second">
            <summary>
            二级缓存
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.CacheManager">
            <summary>
            缓存操作管理器
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Caching.CacheManager.Caches">
            <summary>
            缓存器字典
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Caching.CacheManager.Providers">
            <summary>
            二级缓存
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheManager.SetProvider(Wolf.Infrastructure.Caching.ICacheProvider,Wolf.Infrastructure.Caching.CacheLevel)">
            <summary>
            设置缓存提供者
            </summary>
            <param name="provider">缓存提供者</param>
            <param name="level">缓存级别</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheManager.RemoveProvider(Wolf.Infrastructure.Caching.CacheLevel)">
            <summary>
            移除指定级别的缓存提供者
            </summary>
            <param name="level">缓存级别</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheManager.GetCacher(System.String)">
            <summary>
            获取指定区域的缓存执行者实例
            </summary>
            <param name="region">缓存区域名称</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheManager.GetCacher(System.Type)">
            <summary>
            获取指定类型的缓存执行者实例
            </summary>
            <param name="type">类型实例</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.CacheManager.GetCacher``1">
            <summary>
            获取指定类型的缓存执行者实力
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.CacheMethod">
            <summary>
            缓存方式
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Caching.CacheMethod.Get">
            <summary>
            表示需要从缓存中获取对象。如果缓存中不存在所需的对象，系统则会调用实际的方法获取对象，
            然后将获得的结果添加到缓存中。
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Caching.CacheMethod.Put">
            <summary>
            表示需要将对象存入缓存。此方式会调用实际方法以获取对象，然后将获得的结果添加到缓存中，
            并直接返回方法的调用结果。
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Caching.CacheMethod.Remove">
            <summary>
            表示需要将对象从缓存中移除。
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.ICache">
            <summary>
            缓存操作约定
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Get(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.GetAll">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.GetAll``1">
            <summary>
            获取当前缓存对象中的所有数据
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Set(System.String,System.Object)">
            <summary>
            设置缓存对象，使用默认配置
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Set(System.String,System.Object,System.Int32)">
            <summary>
            设置缓存对象，缓存时间单位：秒
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Set(System.String,System.Object,System.DateTime)">
            <summary>
            设置缓存对象，设置绝对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存对象</param>
            <param name="absoluteExpiration">绝对过期时间，过了这个时间点，缓存即过期</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置缓存对象，设置相对过期时间
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="slidingExpiration">滑动过期时间，在此时间内访问缓存，缓存将继续有效</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICache.Contains(System.String)">
            <summary>
            是否包含指定缓存
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.ICacheProvider">
            <summary>
            缓存提供者约定，用于创建并管理缓存对象
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.ICacheProvider.GetCache(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="regionName">缓存区域名称</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.InternalCacher">
            <summary>
            缓存执行者
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.InternalCacher.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Caching.InternalCacher"/>类型的实例
            </summary>
            <param name="region">缓存区域名称</param>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.RuntimeMemoryCache">
            <summary>
            运行时内存缓存
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Caching.RuntimeMemoryCache.Region">
            <summary>
            获取 缓存区域名称，可作为缓存键标识，给缓存管理带来便利
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.RuntimeMemoryCache.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Caching.RuntimeMemoryCache"/>类型的实例
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.RuntimeMemoryCache.GetCacheKey(System.String)">
            <summary>
            获取缓存键
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Caching.RuntimeMemoryCacheProvider">
            <summary>
            运行时内存缓存提供程序
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Caching.RuntimeMemoryCacheProvider.Enabled">
            <summary>
            获取 缓存是否可用
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Caching.RuntimeMemoryCacheProvider.GetCache(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <param name="regionName">缓存区域名称</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.ApiResult">
            <summary>
            Api请求数据结果
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.ApiResult.Code">
            <summary>
            全局返回码
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.ApiResult.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.ApiResult.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.CommonModel.ApiResult.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.CommonModel.ApiResult"/>类型的实例
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.ApiResult`1">
            <summary>
            Api请求数据结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.ApiResult`1.Data">
            <summary>
            数据结果
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.ItemResult">
            <summary>
            列表项结果-下拉列表
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.ItemResult.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.ItemResult.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.ItemResult.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.LoginInfo">
            <summary>
            登录信息
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.LoginInfo.Login">
            <summary>
            登录账号
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.LoginInfo.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.LoginInfo.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.PagedResult`1">
            <summary>
            分页结果
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedResult`1.Page">
            <summary>
            页索引，即从第几页，从1开始
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedResult`1.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedResult`1.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedResult`1.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedResult`1.Data">
            <summary>
            结果数据
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.CommonModel.PagedResult`1.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.CommonModel.PagedResult`1"/>类型的实例
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.PagedSearch">
            <summary>
            分页查询类
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedSearch.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedSearch.Page">
            <summary>
            页索引，即从第几页，从1开始
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.CommonModel.PagedSearch.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.CommonModel.PagedSearch"/>类型的实例
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.CommonModel.PagedSearch.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.CommonModel.PagedSearch"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.PagedSearch`1">
            <summary>
            分页查询类，带分页条件信息
            </summary>
            <typeparam name="TEntity">查询条件</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.PagedSearch`1.Condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.CommonModel.PagedSearch`1.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.CommonModel.PagedSearch`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.CommonModel.PagedSearch`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.CommonModel.PagedSearch`1"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param>
            <param name="condition"></param>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.PlatformType">
            <summary>
            平台类型
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.PlatformType.Wechat">
            <summary>
            微信
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.PlatformType.Alipay">
            <summary>
            支付宝
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.PlatformType.QQ">
            <summary>
            QQ
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.PlatformType.Delivery">
            <summary>
            快递
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.PlatformType.Sms">
            <summary>
            短信
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.Range`1">
            <summary>
            范围 查询
            </summary>
            <typeparam name="T">数据类型,字符串、数值、时间</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.Range`1.Begin">
            <summary>
            开始值
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.Range`1.End">
            <summary>
            结束值
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.ResultCode">
            <summary>
            结果码
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.ResultCode.Success">
            <summary>
            请求成功
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.ResultCode.Fail">
            <summary>
            失败-业务错误
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.ResultCode.NoResultFound">
            <summary>
            找不到数据
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.ResultCode.Error">
            <summary>
            发生错误-系统错误
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.CommonModel.ResultCode.LoginTimeout">
            <summary>
            业务错误-登录超时
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.UploadResult">
            <summary>
            上传结果
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.UploadResult.FileId">
            <summary>
            文件ID
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.UploadResult.FileName">
            <summary>
            文件名，例如：xxx.jpg
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.UploadResult.FilePath">
            <summary>
            文件路径，例如：~/Upload/Image/xxx.jpg
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.UploadResult.Type">
            <summary>
            文件类型，image/jpeg
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.UploadResult.Length">
            <summary>
            文件长度（字节数）
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.CommonModel.TimeRange">
            <summary>
            时间范围 查询
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.TimeRange.Begin">
            <summary>
            开始值
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.CommonModel.TimeRange.End">
            <summary>
            结束值
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Configs.LogConfig">
            <summary>
            日志配置
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Configs.LogConfig.Instance">
            <summary>
            日志配置实例
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Configs.LogConfig.UseExceptionless">
            <summary>
            是否使用Exceptionless
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Configs.LogConfig.ApiKey">
            <summary>
            Exceptionless Api 密匙
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Configs.LogConfig.ServerUrl">
            <summary>
            Exceptionless 服务地址
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Configs.LogConfig.#cctor">
            <summary>
            静态构造函数
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Context.#cctor">
            <summary>
            初始化上下文
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Context._context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Context.IsWeb">
            <summary>
            是否Web系统
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Context.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Wolf.Infrastructure.Context.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Context.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Wolf.Infrastructure.Contexts.IContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.IContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.IContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.IContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Wolf.Infrastructure.Contexts.WebContext">
            <summary>
            Web上下文
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.WebContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.WebContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.WebContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Wolf.Infrastructure.Contexts.WindowsContext">
            <summary>
            Windows上下文
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.WindowsContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.WindowsContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Contexts.WindowsContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.ConfigBase">
            <summary>
            Ioc配置模块
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.Container">
            <summary>
            容器管理
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Dependency.Container._container">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Dependency.Container._webapiResolver">
            <summary>
            WebApi依赖解析器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Container.Create``1">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Container.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Container.BeginScope">
            <summary>
            作用域开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Container.Register(System.Reflection.Assembly,System.Action{Autofac.ContainerBuilder},Autofac.Core.IModule[])">
            <summary>
            为Web注册依赖
            </summary>
            <param name="assembly">项目所在的程序集</param>
            <param name="action">在注册模块前执行的操作</param>
            <param name="modules">配置模块</param>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Container.CreateBuilder(System.Action{Autofac.ContainerBuilder},Autofac.Core.IModule[])">
            <summary>
            创建容器生成器
            </summary>
            <param name="action">在注册模块前执行的操作</param>
            <param name="modules">配置模块</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Container.Init(System.Action{Autofac.ContainerBuilder},Autofac.Core.IModule[])">
            <summary>
            初始化容器
            </summary>
            <param name="action">在注册模块前执行的操作</param>
            <param name="modules">配置依赖模块</param>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.IDependency">
            <summary>
            依赖注入接口，表示该接口的实现类将自动注册到IOC容器中
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.Ioc">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Dependency.Ioc.AssemblySkipLoadingPattern">
            <summary>
            需要跳过的程序集列表
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.Create(System.Type)">
            <summary>
            创建实例
            </summary>
            <param name="type">实例类型</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.Register(System.Reflection.Assembly,Autofac.Core.IModule[])">
            <summary>
            为Web项目注册依赖
            </summary>
            <param name="assembly">项目所在程序集</param>
            <param name="modules">依赖配置</param>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.Register(System.Reflection.Assembly,System.Boolean,Autofac.Core.IModule[])">
            <summary>
            为Web项目注册依赖
            </summary>
            <param name="assembly">项目所在程序集</param>
            <param name="autoRegister">是否自动注册</param>
            <param name="modules">依赖配置</param>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.RegisterTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},Autofac.ContainerBuilder)">
            <summary>
            注册程序集列表中所有实现了IDependency的类型
            </summary>
            <param name="assemblies">程序集</param>
            <param name="builder">容器构建器</param>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.FilterSystemAssembly(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            过滤系统程序集
            </summary>
            <param name="assemblies">程序集</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.Init(Autofac.Core.IModule[])">
            <summary>
            初始化容器
            </summary>
            <param name="modules">配置依赖模块</param>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Ioc.Init(System.Reflection.Assembly[],Autofac.Core.IModule[])">
            <summary>
            初始化容器
            </summary>
            <param name="assemblies"></param>
            <param name="modules"></param>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.IScope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.IScope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.IScope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.IScopeDependency">
            <summary>
            实现此接口的类型将注册为<see cref="F:Wolf.Infrastructure.Dependency.LifetimeStyle.Scoped"/>模式
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.ISingletonDependency">
            <summary>
            实现此接口的类型将注册为<see cref="F:Wolf.Infrastructure.Dependency.LifetimeStyle.Singleton"/>模式
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.ITransientDependency">
            <summary>
            实现此接口的类型将自动注册为<see cref="F:Wolf.Infrastructure.Dependency.LifetimeStyle.Transient"/>模式
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.LifetimeStyle">
            <summary>
            表示依赖注入的对象声明周期
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Dependency.LifetimeStyle.Transient">
            <summary>
            实时模式，每次获取都创建不同对象
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Dependency.LifetimeStyle.Scoped">
            <summary>
            局部模式，同一生命周期获得相同对象，不同生命周期获取不同对象（PerRequest）
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Dependency.LifetimeStyle.Singleton">
            <summary>
            单例模式，在第一获取实例时创建，之后都获取相同对象
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Dependency.Scope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Dependency.Scope._scope">
            <summary>
            Autofac 作用域
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Scope.#ctor(Autofac.ILifetimeScope)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Dependency.Scope"/>类型的实例
            </summary>
            <param name="scope">Autofac作用域</param>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Scope.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Scope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Dependency.Scope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.ChangeValue">
            <summary>
            变更值
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Entities.ChangeValue.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Entities.ChangeValue.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Entities.ChangeValue.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Entities.ChangeValue.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.ChangeValue.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Domain.Entities.ChangeValue"/>类型的实例
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.ChangeValue.ToString">
            <summary>
            输出变更信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.ChangeValueCollection">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.ChangeValueCollection.Add(System.String,System.String,System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.ChangeValueCollection.ToString">
            <summary>
            输出变更信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.DomainBase`1">
            <summary>
            领域层顶级基类
            </summary>
            <typeparam name="T">领域对象</typeparam>
        </member>
        <member name="F:Wolf.Infrastructure.Domain.Entities.DomainBase`1._description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Domain.Entities.DomainBase`1._rules">
            <summary>
            验证规则集合
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Domain.Entities.DomainBase`1._handler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Domain.Entities.DomainBase`1._changeValues">
            <summary>
            变更值集合
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Domain.Entities.DomainBase`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.SetValidationHandler(Wolf.Infrastructure.Validations.IValidationHandler)">
            <summary>
            设置验证处理器
            </summary>
            <param name="handler">验证处理器</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddValidationRules(System.Collections.Generic.IEnumerable{Wolf.Infrastructure.Validations.IValidationRule})">
            <summary>
            添加验证规则列表
            </summary>
            <param name="rules">验证规则列表</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddValidationRule(Wolf.Infrastructure.Validations.IValidationRule)">
            <summary>
            添加验证规则
            </summary>
            <param name="rule">验证规则</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.GetValidationResult">
            <summary>
            获取验证结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.Validate(Wolf.Infrastructure.Validations.ValidationResultCollection)">
            <summary>
            验证并添加到验证结果集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.HandleValidationResult(Wolf.Infrastructure.Validations.ValidationResultCollection)">
            <summary>
            处理验证结果
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.GetChanges(`0)">
            <summary>
            获取变更属性
            </summary>
            <param name="newEntity">新对象</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddChanges(`0)">
            <summary>
            添加变更列表
            </summary>
            <param name="newEntity">新对象</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddChange``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},``1)">
            <summary>
            添加变更
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="expression">属性表达式，范例：t => t.Name</param>
            <param name="newValue">新值，范例：newEntity.Name</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddChange``1(System.String,System.String,``0,``0)">
            <summary>
            添加变更
            </summary>
            <typeparam name="TValue">属性类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="description">描述</param>
            <param name="oldValue">旧值，范例：this.Name</param>
            <param name="newValue">新值，范例：newEntity.Name</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddChange``1(Wolf.Infrastructure.Domain.Entities.ICompareChange{``0},``0)">
            <summary>
            添加变更
            </summary>
            <typeparam name="TDomainObject">领域对象</typeparam>
            <param name="oldObject">旧对象</param>
            <param name="newObject">新对象</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddChange``1(System.Collections.Generic.IEnumerable{Wolf.Infrastructure.Domain.Entities.ICompareChange{``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加变更
            </summary>
            <typeparam name="TDomainObject">领域对象</typeparam>
            <param name="oldObjects">旧对象列表</param>
            <param name="newObjects">新对象列表</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddDescriptions">
            <summary>
            添加描述
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddDescription(System.String)">
            <summary>
            添加描述
            </summary>
            <param name="description">描述</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.AddDescription``1(System.String,``0)">
            <summary>
            添加描述
            </summary>
            <typeparam name="TValue">值类型</typeparam>
            <param name="name">描述名</param>
            <param name="value">描述值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.DomainBase`1.ToString">
            <summary>
            输出对象状态
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.EntityBase`2">
            <summary>
            实体基类
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IAggregateRoot">
            <summary>
            聚合根
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IAggregateRoot`1">
            <summary>
            聚合根
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IAggregateRoot`2">
            <summary>
            聚合根
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.ICompareChange`1">
            <summary>
            通过对象比较获取变更属性集
            </summary>
            <typeparam name="T">领域对象类型</typeparam>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.ICompareChange`1.GetChanges(`0)">
            <summary>
            获取变更属性
            </summary>
            <param name="other">其它领域对象</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IDelete">
            <summary>
            逻辑删除
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Entities.IDelete.IsDeleted">
            <summary>
            是否删除
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IDomainObject">
            <summary>
            领域对象
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Entities.IDomainObject.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IEntity`1">
            <summary>
            实体
            </summary>
            <typeparam name="TKey">实体类型</typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IEntity`2">
            <summary>
            实体
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IKey`1">
            <summary>
            标识
            </summary>
            <typeparam name="TKey">标识类型</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Entities.IKey`1.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Entities.IVersion">
            <summary>
            乐观锁
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Entities.IVersion.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Repositories.ICompactRepository">
            <summary>
            精简仓储 - 配合Po使用
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2">
            <summary>
            仓储 - 可读
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FindAsNoTraking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取未跟踪的实体查询对象
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取跟踪的实体查询对象
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FindById(System.Object)">
            <summary>
            获取实体，根据主键ID
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FindByIdAsync(System.Object)">
            <summary>
            获取实体，根据主键ID
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取实体，根据条件获取，不存在则返回Null
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取实体，根据条件获取，不存在则返回Null
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FindAll(System.String)">
            <summary>
            获取实体集合，全部数据
            </summary>
            <param name="order">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FindAllAsync(System.String)">
            <summary>
            获取实体集合，全部数据
            </summary>
            <param name="order">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FindList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            获取实体集合，条件查询数据
            </summary>
            <param name="predicate">条件</param>
            <param name="order">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.FindListAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            获取实体集合，条件查询数据
            </summary>
            <param name="predicate">条件</param>
            <param name="order">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断实体是否存在
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断实体是否存在
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取实体集合数量
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IReadableRepository`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取实体集合数量
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Repositories.IRepository">
            <summary>
            仓储，定义仓储模型中的数据标准操作
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository.ExecuteSqlCommand(System.String,System.Object[])">
            <summary>
            执行sql语句或存储过程的增删改 返回影响的行数-基于EF
            </summary>
            <param name="sql">sql语句或存储过程</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository.ExecuteSqlCommand(System.String,System.Object)">
            <summary>
            执行sql语句或存储过程的增删改 返回影响的行数-基于Dapper
            </summary>
            <param name="sql">sql语句或存储过程</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository.SqlSingle``1(System.String,System.Object[])">
            <summary>
            执行sql语句查询，返回实体-基于EF
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository.SqlSingle``1(System.String,System.Object)">
            <summary>
            执行sql语句查询，返回实体-基于Dapper
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository.SqlQuery``1(System.String,System.Object[])">
            <summary>
            执行sql语句或存储过程的查询 返回集合-基于EF
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="sql">sql语句或存储过程</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository.SqlPage``1(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sql分页查询
            </summary>
            <typeparam name="TEntity">返回结果</typeparam>
            <param name="sql">sql语句</param>
            <param name="where">where条件</param>
            <param name="page">当前页</param>
            <param name="pageSize">每页显示记录数</param>
            <param name="order">排序，例如：name desc,nickname desc</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Repositories.IRepository`2">
            <summary>
            仓储，定义仓储模型中的数据操作标准
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Entities">
            <summary>
            获取 当前实体类型的查询数据集，数据将使用不跟踪变化的方式来查询，当数据用于展现时，推荐使用此数据集，如果用于新增，更新，删除时，请使用<see cref="P:Wolf.Infrastructure.Domain.Repositories.IRepository`2.TrackEntities"/>数据集
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.IRepository`2.TrackEntities">
            <summary>
            获取 当前实体类型的查询数据集，当数据用于新增，更新，删除时，使用此数据集，如果数据用于展现，推荐使用<see cref="P:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Entities"/>数据集
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Insert(`0)">
            <summary>
            新增实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            新增实体
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Delete(`0)">
            <summary>
            删除实体，根据实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除实体，根据Lambda表达式条件
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.BatchDelete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            批量删除实体，根据Lambda表达式条件
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Delete(System.Object)">
            <summary>
            删除实体，根据主键ID
            </summary>
            <param name="id">主键ID</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量删除实体，根据实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Update(`0)">
            <summary>
            更新实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Update(`0,`0)">
            <summary>
            更新实体
            </summary>
            <param name="newEntity">新实体</param>
            <param name="oldEntity">数据库中旧的实体</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Update(`0,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            更新实体，指定列修改
            </summary>
            <param name="entity">实体</param>
            <param name="properties">要修改的 属性 名称</param>
            <param name="isProUpdate">true:指定列更新,false:忽略列更新</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Update(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,`0}})">
            <summary>
            批量更新实体，根据Lambda表达式条件更新
            </summary>
            <param name="predicate">条件</param>
            <param name="updateExpression">更新表达式</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量更新实体
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Update(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[])">
            <summary>
            批量更新实体，统一修改
            </summary>
            <param name="entity">要修改的实体对象</param>
            <param name="predicate">条件</param>
            <param name="modifiedProNames">要修改的 属性 名称</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.FindById(System.Object)">
            <summary>
            获取实体，根据主键ID
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.FirstOrDefault(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取实体，根据条件获取，不存在则返回Null
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.FindAll(System.String)">
            <summary>
            获取实体集合，全部数据
            </summary>
            <param name="order">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.FindList(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String)">
            <summary>
            获取实体集合，条件查询数据
            </summary>
            <param name="predicate">条件</param>
            <param name="order">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.FindAsNoTraking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取未跟踪的实体查询对象
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取跟踪的实体查询对象
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Item(`1)">
            <summary>
            获取实体，索引器查找，获取指定标识的实体
            </summary>
            <param name="id">主键ID</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断实体是否存在
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            获取实体集合数量
            </summary>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Page(System.Int32,System.Int32,System.Int32@,System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            分页查询
            </summary>
            <param name="page">当前页</param>
            <param name="pageSize">每页记录数</param>
            <param name="total">总记录数</param>
            <param name="orderBy">排序条件（一定要有）</param>
            <param name="predicate">查询条件</param>
            <param name="desc">排序方式,true:降序,false:升序</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Page(System.Int32,System.Int32,System.Int32@,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            分页查询
            </summary>
            <param name="page">当前页</param>
            <param name="pageSize">每页记录数</param>
            <param name="total">总记录数</param>
            <param name="order">排序条件（一定要有）</param>
            <param name="predicate">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Select``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询转换
            </summary>
            <typeparam name="TDto">数据传输对象</typeparam>
            <param name="predicate">条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.Clear">
            <summary>
            清空实体
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.ClearCache">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.GetUnitOfWork">
            <summary>
            获取工作单元
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.IRepository`2.SqlQuery(System.String,System.Object[])">
            <summary>
            执行存储过程或自定义sql语句 --返回集合
            </summary>
            <param name="sql">sql语句</param>
            <param name="parms">参数</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Repositories.Pager.IPager">
            <summary>
            分页组件
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.IPager.GetPageCount">
            <summary>
            获取总页数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.IPager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.IPager.GetTakeCount">
            <summary>
            获取需要的行数
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.IPager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.IPager.GetStartNumber">
            <summary>
            获取起始行数
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.IPager.GetEndNumber">
            <summary>
            获取结束行数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.IPager.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Repositories.Pager.IPagerBase">
            <summary>
            分页
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.IPagerBase.Page">
            <summary>
            页数，即从第几页，从1开始
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.IPagerBase.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.IPagerBase.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Repositories.Pager.Pager">
            <summary>
            分页组件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.Page">
            <summary>
            页索引，即第几页，从1开始
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.PageSize">
            <summary>
            每页显示行数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.TotalCount">
            <summary>
            总行数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.Keyword">
            <summary>
            搜索关键字
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Domain.Repositories.Pager.Pager"/>类型的实例
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Domain.Repositories.Pager.Pager"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数，默认20</param>
            <param name="order">排序条件</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Domain.Repositories.Pager.Pager"/>类型的实例
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数，默认20</param>
            <param name="totalCount">总行数</param>
            <param name="order">排序条件</param>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.GetTakeCount">
            <summary>
            获取需要的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.GetPageCount">
            <summary>
            获取总页数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.GetSkipCount">
            <summary>
            获取跳过的行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.GetStartNumber">
            <summary>
            获取起始行数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Repositories.Pager.Pager.GetEndNumber">
            <summary>
            获取结束行数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Domain.Uow.IUnitOfWork">
            <summary>
            业务工作单元接口
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Uow.IUnitOfWork.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Domain.Uow.IUnitOfWork.Commit">
            <summary>
            提交更新
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Exceptions.BusinessException">
            <summary>
            业务异常
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Exceptions.BusinessException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Exceptions.BusinessException.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Exceptions.BusinessException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Exceptions.BusinessException.#ctor(System.String,System.Int32)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Exceptions.BusinessException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="errCode">错误码</param>
        </member>
        <member name="T:Wolf.Infrastructure.Exceptions.LogedException">
            <summary>
            日志已记录 异常
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Exceptions.LogedException.#ctor(System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Exceptions.LogedException"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="innerException">内部异常</param>
        </member>
        <member name="T:Wolf.Infrastructure.Exceptions.PlatformException">
            <summary>
            平台服务异常
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Exceptions.PlatformException.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Exceptions.PlatformException.PlatformType">
            <summary>
            平台类型
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Exceptions.PlatformException.#ctor(Wolf.Infrastructure.CommonModel.PlatformType,System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Exceptions.PlatformException"/>类型的实例
            </summary>
            <param name="platform">平台类型</param>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Exceptions.PlatformException.#ctor(Wolf.Infrastructure.CommonModel.PlatformType,System.String,System.Int32)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Exceptions.PlatformException"/>类型的实例
            </summary>
            <param name="platform">平台类型</param>
            <param name="message">错误消息</param>
            <param name="errCode">错误码</param>
        </member>
        <member name="T:Wolf.Infrastructure.Exceptions.TransactionHandledException">
            <summary>
            事务已处理异常
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Extensions.Extensions">
            <summary>
            通用扩展
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Extensions.Extensions.SafeString(System.Object)">
            <summary>
            安全转换为字符串，去除两端空格，当值为null时返回""
            </summary>
            <param name="input">输入值</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Extensions.QueryableExtensions">
            <summary>
            查询扩展
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Extensions.QueryableExtensions.RowToColumn``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            动态Linq方式实现行转列
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">数据</param>
            <param name="dimensionList">维度列</param>
            <param name="dynamicColumn">动态列</param>
            <param name="allDynamicColumn">所有动态列</param>
            <returns>行转列后数据</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Extensions.QueryableExtensions.RowToColumn(System.Data.DataTable,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            动态Linq方式实现行转列
            </summary>
            <param name="table">数据</param>
            <param name="dimensionList">维度列</param>
            <param name="dynamicColumn">动态列</param>
            <param name="allDynamicColumn">所有动态列</param>
            <returns>行转列后的数据</returns>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.ApiFormatter">
            <summary>
            Api格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ApiFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化Api格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ApiFormatter.Format">
            <summary>
            格式化
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.BusinessFormatter">
            <summary>
            业务格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.BusinessFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化业务格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.BusinessFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.CaptionFormatter">
            <summary>
            标题格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.CaptionFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化标题格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.CaptionFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.ClassFormatter">
            <summary>
            类格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ClassFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化类格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ClassFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.ContentFormatter">
            <summary>
            内容格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ContentFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化内容格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ContentFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.ErrorFormatter">
            <summary>
            错误格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ErrorFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化错误格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ErrorFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ErrorFormatter.AddErrorCode">
            <summary>
            添加错误码
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ErrorFormatter.AddError">
            <summary>
            添加错误消息
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.FormatterBase">
            <summary>
            日志消息基格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.FormatterBase.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化日志消息格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.Formats.FormatterBase.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.Formats.FormatterBase.Result">
            <summary>
            输出结果
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.FormatterBase.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.FormatterBase.Add(System.String,System.String)">
            <summary>
            添加消息
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.IpFormatter">
            <summary>
            Ip格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.IpFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化Ip格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.IpFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.LogMessageFormatter">
            <summary>
            日志消息格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.LogMessageFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化日志消息格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.Formats.LogMessageFormatter.Line">
            <summary>
            行号
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.LogMessageFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.LogMessageFormatter.Add(Wolf.Infrastructure.Logs.Formats.FormatterBase)">
            <summary>
            添加消息
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.LogMessageFormatter.Finish">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.ParamsFormatter">
            <summary>
            请求参数格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ParamsFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化类格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.ParamsFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.SqlFormatter">
            <summary>
            Sql格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.SqlFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化Sql格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.SqlFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.SqlParamsFormatter">
            <summary>
            Sql参数格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.SqlParamsFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化Sql参数格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.SqlParamsFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.StackTraceFormatter">
            <summary>
            堆栈跟踪格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.StackTraceFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化堆栈跟踪格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.StackTraceFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.TitleFormatter">
            <summary>
            标题格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.TitleFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化标题格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.TitleFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.TitleFormatter.AddLevel">
            <summary>
            添加日志级别
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.TitleFormatter.AddTraceId">
            <summary>
            添加跟踪号
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.TitleFormatter.AddTime">
            <summary>
            添加操作时间
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.TitleFormatter.AddTotalSeconds">
            <summary>
            添加已执行时间
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.UrlFormatter">
            <summary>
            Url格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.UrlFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化Url格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.UrlFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.UrlFormatter.AddUrl">
            <summary>
            添加Url
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.Formats.UserFormatter">
            <summary>
            用户格式器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.UserFormatter.#ctor(Wolf.Infrastructure.Logs.LogMessage)">
            <summary>
            初始化用户格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.Formats.UserFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.ILog">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.BusinessId(System.String)">
            <summary>
            设置业务编号
            </summary>
            <param name="businessId">业务编号</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Category(System.String)">
            <summary>
            设置分类
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Class(System.String)">
            <summary>
            设置类名
            </summary>
            <param name="class">类名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Method(System.String)">
            <summary>
            设置方法名
            </summary>
            <param name="method">方法名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Params(System.String,System.Object[])">
            <summary>
            设置参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.ParamsLine(System.String,System.Object[])">
            <summary>
            设置参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Caption(System.String,System.Object[])">
            <summary>
            设置标题
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Content(System.String,System.Object[])">
            <summary>
            设置内容
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.ContentLine(System.String,System.Object[])">
            <summary>
            设置内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Sql(System.String,System.Object[])">
            <summary>
            设置Sql语句
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.SqlLine(System.String,System.Object[])">
            <summary>
            设置Sql语句并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.SqlParams(System.String,System.Object[])">
            <summary>
            设置Sql参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.SqlParamsLine(System.String,System.Object[])">
            <summary>
            设置Sql参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.ErrorCode(System.String)">
            <summary>
            设置错误码
            </summary>
            <param name="value">错误码</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Exception(System.Exception)">
            <summary>
            设置异常
            </summary>
            <param name="value">异常</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.ReplaceSql(System.String)">
            <summary>
            替换Sql语句
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Rquest(System.String,System.String,System.String,System.String)">
            <summary>
            设置Rquest
            </summary>
            <param name="area">区域</param>
            <param name="controller">控制器</param>
            <param name="action">操作方法</param>
            <param name="requestType">请求方式</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.GetCaption">
            <summary>
            获取标题
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.GetContent">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.GetSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.GetMessage">
            <summary>
            获取日志消息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.ILog.IsDebugEnabled">
            <summary>
            Debug级别是否启用
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.ILog.Fatal(System.String,System.Object[])">
            <summary>
            致命错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.LogBase">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.#ctor">
            <summary>
            初始化日志
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._traceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._logName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._businessId">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._category">
            <summary>
            分类
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._class">
            <summary>
            类名
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._params">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._content">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._sqlParams">
            <summary>
            Sql参数
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._errorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._errorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._stackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._area">
            <summary>
            区域
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._controller">
            <summary>
            控制器
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._action">
            <summary>
            操作方法
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogBase._requetType">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.BusinessId(System.String)">
            <summary>
            设置业务编号
            </summary>
            <param name="businessId">业务编号</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Category(System.String)">
            <summary>
            设置分类
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Class(System.String)">
            <summary>
            设置类名
            </summary>
            <param name="class">类名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Method(System.String)">
            <summary>
            设置方法名
            </summary>
            <param name="method">方法名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Params(System.String,System.Object[])">
            <summary>
            设置参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Append(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.ParamsLine(System.String,System.Object[])">
            <summary>
            设置参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Caption(System.String,System.Object[])">
            <summary>
            设置标题
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Content(System.String,System.Object[])">
            <summary>
            设置内容
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.ContentLine(System.String,System.Object[])">
            <summary>
            设置内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Sql(System.String,System.Object[])">
            <summary>
            设置Sql语句
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.SqlLine(System.String,System.Object[])">
            <summary>
            设置Sql语句并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.SqlParams(System.String,System.Object[])">
            <summary>
            设置Sql参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.SqlParamsLine(System.String,System.Object[])">
            <summary>
            设置Sql参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.ErrorCode(System.String)">
            <summary>
            设置错误码
            </summary>
            <param name="value">错误码</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Exception(System.Exception)">
            <summary>
            设置异常
            </summary>
            <param name="value">异常</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.ReplaceSql(System.String)">
            <summary>
            替换Sql语句
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Rquest(System.String,System.String,System.String,System.String)">
            <summary>
            设置Rquest
            </summary>
            <param name="area">区域</param>
            <param name="controller">控制器</param>
            <param name="action">操作方法</param>
            <param name="requestType">请求方式</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.GetCaption">
            <summary>
            获取标题
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.GetContent">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.GetSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.GetMessage">
            <summary>
            获取日志消息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogBase.IsDebugEnabled">
            <summary>
            Debug级别是否启用
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.DebugLog">
            <summary>
            写调试日志
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Execute(System.Action,Wolf.Infrastructure.Logs.LogLevel,System.String,System.Object[])">
            <summary>
            执行
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.InfoLog">
            <summary>
            写信息日志
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.WarnLog">
            <summary>
            写警告日志
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.ErrorLog">
            <summary>
            写错误日志
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.Fatal(System.String,System.Object[])">
            <summary>
            致命错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogBase.FatalLog">
            <summary>
            写致命错误日志
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.LogContext">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogContext.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogContext.#ctor(System.String)">
            <summary>
            初始化日志上下文
            </summary>
            <param name="traceId">跟踪号</param>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogLevel.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.LogMessage">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.LogName">
            <summary>
            日志名称
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.LevelDesc">
            <summary>
            日志级别说明
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.OperationTime">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Duration">
            <summary>
            持续时间
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Url">
            <summary>
            网址
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.BusinessId">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Application">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Tenant">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Category">
            <summary>
            分类
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Class">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.ThreadId">
            <summary>
            线程号
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Operator">
            <summary>
            操作人姓名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Role">
            <summary>
            操作人角色
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.SqlParams">
            <summary>
            Sql参数
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Error">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.StackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Area">
            <summary>
            区域信息
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Controller">
            <summary>
            控制器
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Action">
            <summary>
            操作方法
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.RequestType">
            <summary>
            请求方式
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.ExceptionInfo">
            <summary>
            异常
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.LogMessage.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.LogMessage.ToString">
            <summary>
            获取格式化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Logs.NullLog">
            <summary>
            空日志
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.#ctor">
            <summary>
            初始化日志
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Logs.NullLog.Instance">
            <summary>
            空日志实例
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.BusinessId(System.String)">
            <summary>
            设置业务编号
            </summary>
            <param name="businessId">业务编号</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Category(System.String)">
            <summary>
            设置分类
            </summary>
            <param name="category">分类</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Class(System.String)">
            <summary>
            设置类名
            </summary>
            <param name="class">类名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Method(System.String)">
            <summary>
            设置方法名
            </summary>
            <param name="method">方法名</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Params(System.String,System.Object[])">
            <summary>
            设置参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.ParamsLine(System.String,System.Object[])">
            <summary>
            设置参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Caption(System.String,System.Object[])">
            <summary>
            设置标题
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Content(System.String,System.Object[])">
            <summary>
            设置内容
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.ContentLine(System.String,System.Object[])">
            <summary>
            设置内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Sql(System.String,System.Object[])">
            <summary>
            设置Sql语句
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.SqlLine(System.String,System.Object[])">
            <summary>
            设置Sql语句并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.SqlParams(System.String,System.Object[])">
            <summary>
            设置Sql参数
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.SqlParamsLine(System.String,System.Object[])">
            <summary>
            设置Sql参数并换行
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.ErrorCode(System.String)">
            <summary>
            设置错误码
            </summary>
            <param name="value">错误码</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Exception(System.Exception)">
            <summary>
            设置异常
            </summary>
            <param name="value">异常</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.ReplaceSql(System.String)">
            <summary>
            替换Sql语句
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.GetCaption">
            <summary>
            获取标题
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.GetContent">
            <summary>
            获取内容
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.GetSql">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.GetMessage">
            <summary>
            获取日志消息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wolf.Infrastructure.Logs.NullLog.IsDebugEnabled">
            <summary>
            Debug级别是否启用
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Logs.NullLog.Fatal(System.String,System.Object[])">
            <summary>
            致命错误
            </summary>
            <param name="value">值</param>
            <param name="args">变量值</param>
        </member>
        <member name="T:Wolf.Infrastructure.Security.ScrambleQueryStrings">
            <summary>
            加密查询字符串
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Security.ScrambleQueryStrings.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Security.ScrambleQueryStrings"/>类型的实例
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Security.ScrambleQueryStrings.ScrambleKey">
            <summary>
            密匙
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Security.ScrambleQueryStrings.ScrambleIV">
            <summary>
            IV
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Security.ScrambleQueryStrings.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="message">需要加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Security.ScrambleQueryStrings.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="message">需要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Security.ScrambleQueryStrings.DecryptQueryString(System.String)">
            <summary>
            解密查询字符串
            </summary>
            <param name="message">需要解密的字符串</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.Page.PageBuilder">
            <summary>
            分页生成器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Page.PageBuilder.GenerateRecordCount(System.String,System.String)">
            <summary>
            生成查询总记录数Sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="where">where条件</param>
            <returns>总记录数Sql</returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Page.PageBuilder.GeneratePagingWithRowNumberSql(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取分页查询sql语句
            </summary>
            <param name="sql">sql语句</param>
            <param name="where">查询条件</param>
            <param name="page">当前页</param>
            <param name="pageSize">每页记录数</param>
            <param name="order">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Page.PageBuilder.FetchPageBody(System.String)">
            <summary>
            从sql语句中获取分页语句
            </summary>
            <param name="sql">sql语句</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.AbstractQuery">
            <summary>
            抽象查询
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.QueryBuilder.AbstractQuery.Parent">
            <summary>
            父查询
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1">
            <summary>
            查询基类
            </summary>
            <typeparam name="TQ">查询基类</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.bindingOrder">
            <summary>
            绑定排序
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.Clauses">
            <summary>
            条件列表
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.orFlag">
            <summary>
            Or 标识
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.notFlag">
            <summary>
            Not 标识
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.EngineScope">
            <summary>
            引擎域
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1"/>类型的实例
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.SetEngineScope(System.String)">
            <summary>
            设置引擎域
            </summary>
            <param name="engine">引擎名</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.OrderedClauses(System.String)">
            <summary>
            排序条件，对条件列表进行排序
            </summary>
            <param name="engine">引擎名</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.GetBindings(System.String)">
            <summary>
            获取绑定参数
            </summary>
            <param name="engine">引擎名</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.NewQuery">
            <summary>
            创建新的查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.SetParent(Wolf.Infrastructure.SqlBuilder.QueryBuilder.AbstractQuery)">
            <summary>
            设置父查询
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.NewChild">
            <summary>
            创建子查询
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.Add(System.String,Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AbstractClause,System.String)">
            <summary>
            添加条件
            </summary>
            <param name="component">组件</param>
            <param name="clause">条件</param>
            <param name="engineCode">引擎编码</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.Get``1(System.String,System.String)">
            <summary>
            获取组件中的条件列表
            </summary>
            <typeparam name="TC">条件</typeparam>
            <param name="component">组件</param>
            <param name="engineCode">引擎编码</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.Get(System.String,System.String)">
            <summary>
            获取组件中的条件列表
            </summary>
            <param name="component">组件</param>
            <param name="engineCode">引擎编码</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.BaseQuery`1.GetOne``1(System.String,System.String)">
            <summary>
            获取单个组件条件
            </summary>
            <typeparam name="C">条件</typeparam>
            <param name="component">组件</param>
            <param name="engineCode">引擎编码</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AbstractClause">
            <summary>
            抽象条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AbstractClause.Engine">
            <summary>
            引擎
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AbstractClause.Component">
            <summary>
            组件
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AbstractClause.GetBindings(System.String)">
            <summary>
            获取绑定参数数组
            </summary>
            <param name="engine">引擎名</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AbstractClause.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AggregateClause">
            <summary>
            聚合条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AggregateClause.Columns">
            <summary>
            列名集合
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AggregateClause.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AggregateClause.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.AbstractColumn">
            <summary>
            抽象列
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.Column">
            <summary>
            列
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.Column.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.Column.Clone">
            <summary>
            克隆对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Clauses.QueryColumn">
            <summary>
            查询列
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.AbstractCondition">
            <summary>
            抽象条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.AbstractCondition.IsOr">
            <summary>
            是否 Or 条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.AbstractCondition.IsNot">
            <summary>
            是否 Not 条件
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BasicCondition`1">
            <summary>
            基础条件，表示列和值之间的比较
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BasicCondition`1.Column">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BasicCondition`1.Operator">
            <summary>
            操作符
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BasicCondition`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BasicStringCondition">
            <summary>
            基础条件-字符串，表示列和值之间的比较
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BasicStringCondition.CaseSensitive">
            <summary>
            是否区分大小写，默认不区分
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BetweenCondition`1">
            <summary>
            范围条件，表示Between条件
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BetweenCondition`1.Column">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BetweenCondition`1.Max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.BetweenCondition`1.Min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.ExistsCondition`1">
            <summary>
            表示一个"存在子查询"条件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.ExistsCondition`1.Query">
            <summary>
            子查询
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.InCondition`1">
            <summary>
            In条件，表示In条件
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.InCondition`1.Column">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.InCondition`1.Values">
            <summary>
            值集合
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.InQueryCondition">
            <summary>
            In 子查询条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.InQueryCondition.Column">
            <summary>
            列名
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.NestedCondition`1">
            <summary>
            嵌套子句条件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.NestedCondition`1.Query">
            <summary>
            子查询
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.NullCondition">
            <summary>
            Null条件，表示一个"is null"条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.NullCondition.Column">
            <summary>
            列名
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.QueryCondition`1">
            <summary>
            查询条件，表示列和完整子查询之间的比较
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.RawCondition">
            <summary>
            原始条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.RawCondition.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.RawCondition.Bindings">
            <summary>
            绑定参数
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.TwoColumnsCondition">
            <summary>
            两列条件，表示两列之间的比较，用于表与表之间的判断，例如：A.Id=B.Id
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.TwoColumnsCondition.First">
            <summary>
            条件一
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.TwoColumnsCondition.Operator">
            <summary>
            操作符
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.QueryBuilder.Conditions.TwoColumnsCondition.Second">
            <summary>
            条件二
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator">
            <summary>
            Sql操作符
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.Equal">
            <summary>
            等于
            </summary>        
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.GreaterThanEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.LessThanEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.LessThan">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.GreaterThan">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.Like">
            <summary>
            全模糊
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.LikeLeft">
            <summary>
            左模糊
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.LikeRight">
            <summary>
            右模糊
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.SqlOperator.Between">
            <summary>
            范围
            </summary>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition">
            <summary>
            Where条件
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.WhereList">
            <summary>
            Where列表
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.ConditionDic">
            <summary>
            条件字典
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.ParamValues">
            <summary>
            参数值，记录参数（名-值）
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.ParamPrefix">
            <summary>
            参数前缀
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.AddCondition(System.String,System.Object,Wolf.Infrastructure.SqlBuilder.Where.SqlOperator,System.Boolean)">
            <summary>
            添加条件
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="sqlOperator">操作符</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.AddSqlCondition(System.String,System.Boolean)">
            <summary>
            添加Sql
            </summary>
            <param name="sql">sql语句</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.In(System.String,System.Object,System.Boolean)">
            <summary>
            添加In条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.AddBetweenCondition(System.String,System.Object,System.Object,System.Boolean)">
            <summary>
            添加Between条件
            </summary>
            <param name="fieldName">字段名</param>
            <param name="beginValue">开始值</param>
            <param name="endValue">结束值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Between(System.String,System.Object,System.Object,System.Boolean)">
            <summary>
            添加范围条件过滤
            </summary>
            <param name="fieldName">字段名</param>
            <param name="beginValue">开始值</param>
            <param name="endValue">结束值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Between(System.String,Wolf.Infrastructure.CommonModel.TimeRange,System.Boolean)">
            <summary>
            添加范围条件过滤
            </summary>
            <param name="fieldName">字段名</param>
            <param name="range">时间范围</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Equal(System.String,System.Object,System.Boolean)">
            <summary>
            添加相等条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.NotEqual(System.String,System.Object,System.Boolean)">
            <summary>
            添加不相等条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Greater(System.String,System.Object,System.Boolean)">
            <summary>
            添加大于条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condtion">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.GreaterEqual(System.String,System.Object,System.Boolean)">
            <summary>
            添加大于等于条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Less(System.String,System.Object,System.Boolean)">
            <summary>
            添加小于条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.LessEqual(System.String,System.Object,System.Boolean)">
            <summary>
            添加小于等于条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Contains(System.String,System.Object,System.Boolean)">
            <summary>
            添加头尾匹配条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Starts(System.String,System.Object,System.Boolean)">
            <summary>
            添加头匹配条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.Ends(System.String,System.Object,System.Boolean)">
            <summary>
            添加尾匹配条件过滤
            </summary>
            <param name="field">字段名</param>
            <param name="value">字段值</param>
            <param name="condition">拼接条件</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.BuildSql">
            <summary>
            构建Sql
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.BuildParamSql">
            <summary>
            构建参数化Sql
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.GetParamValue">
            <summary>
            获取参数值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.GetParamDic">
            <summary>
            获取参数字典
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.ConvertSqlOperator(Wolf.Infrastructure.SqlBuilder.Where.SqlOperator)">
            <summary>
            辅助枚举类型为对应的Sql语句操作符号
            </summary>
            <param name="sqlOperator">操作符</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.ConvertParamValue(System.Type,System.Object)">
            <summary>
            转换参数值
            </summary>
            <param name="type">参数类型</param>
            <param name="fieldValue">参数值</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.GetParamIndex(System.String)">
            <summary>
            获取参数索引
            </summary>
            <param name="field">字段名</param>
            <returns>参数索引</returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.GetFieldName(System.String)">
            <summary>
            获取字段名
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereCondition.GetParamName(System.String)">
            <summary>
            获取参数字段名
            </summary>
            <param name="field">字段名</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.FieldName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.FieldValue">
            <summary>
            字段值，开始字段值
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.EndValue">
            <summary>
            字段值，结束字段值（仅Between）
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.Type">
            <summary>
            字段值类型
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.SqlOperator">
            <summary>
            Sql操作符
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.Condition">
            <summary>
            拼接条件
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.SqlWhere">
            <summary>
            Sql条件，如果当前条件存在，则忽略其他设置
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo"/>类型的实例
            </summary>
            <param name="sqlWhere">sql语句条件</param>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.#ctor(System.String,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo"/>类型的实例
            </summary>
            <param name="sqlWhere">sql语句条件</param>
            <param name="condition">拼接条件</param>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.#ctor(System.String,System.Object,Wolf.Infrastructure.SqlBuilder.Where.SqlOperator)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo"/>类型的实例
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="sqlOperator">操作符</param>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.#ctor(System.String,System.Object,Wolf.Infrastructure.SqlBuilder.Where.SqlOperator,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo"/>类型的实例
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldValue">字段值</param>
            <param name="sqlOperator">操作符</param>
            <param name="condition">拼接条件</param>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.#ctor(System.String,System.Object,System.Object,Wolf.Infrastructure.SqlBuilder.Where.SqlOperator)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo"/>类型的实例
            </summary>
            <param name="fieldName">字段名</param>
            <param name="beginValue">开始字段值</param>
            <param name="endValue">结束字段值</param>
            <param name="sqlOperator">操作符</param>
        </member>
        <member name="M:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo.#ctor(System.String,System.Object,System.Object,Wolf.Infrastructure.SqlBuilder.Where.SqlOperator,System.Boolean)">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.SqlBuilder.Where.WhereInfo"/>类型的实例
            </summary>
            <param name="fieldName">字段名</param>
            <param name="beginValue">开始字段值</param>
            <param name="endValue">结束字段值</param>
            <param name="sqlOperator">操作符</param>
            <param name="condition">拼接条件</param>
        </member>
        <member name="T:Wolf.Infrastructure.Utils.WebUtil">
            <summary>
            Web工具
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Utils.WebUtil.Timeout">
            <summary>
            等待请求开始返回的超时时间
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Utils.WebUtil.ReadWriteTimeout">
            <summary>
            等待读取数据完成的超时时间
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Utils.WebUtil.IgnoreSSLCheck">
            <summary>
            是否忽略SSL检查
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.DoPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            执行HTTP POST请求。
            </summary>
            <param name="url">请求地址</param>
            <param name="textParams">请求文本参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.DoPost(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            执行HTTP POST请求。
            </summary>
            <param name="url">请求地址</param>
            <param name="textParams">请求文本参数</param>
            <param name="headerParams">请求头部参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.DoGet(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            执行HTTP GET请求。
            </summary>
            <param name="url">请求地址</param>
            <param name="textParams">请求文本参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.DoGet(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            执行HTTP GET请求。
            </summary>
            <param name="url">请求地址</param>
            <param name="textParams">请求文本参数</param>
            <param name="headerParams">请求头部参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.DoPost(System.String,System.Byte[],System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            执行带body体的POST请求。
            </summary>
            <param name="url">请求地址，含URL参数</param>
            <param name="body">请求body体字节流</param>
            <param name="contentType">body内容类型</param>
            <param name="headerParams">请求头部参数</param>
            <returns>HTTP响应</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.GetResponseAsString(System.Net.HttpWebResponse,System.Text.Encoding)">
            <summary>
            把响应流转换为文本。
            </summary>
            <param name="rsp">响应流对象</param>
            <param name="encoding">编码方式</param>
            <returns>响应文本</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.BuildRequestUrl(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            组装含参数的请求URL。
            </summary>
            <param name="url">请求地址</param>
            <param name="parameters">请求参数映射</param>
            <returns>带参数的请求URL</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.BuildRequestUrl(System.String,System.String[])">
            <summary>
            组装含参数的请求URL。
            </summary>
            <param name="url">请求地址</param>
            <param name="queries">一个或多个经过URL编码后的请求参数串</param>
            <returns>带参数的请求URL</returns>
        </member>
        <member name="M:Wolf.Infrastructure.Utils.WebUtil.BuildQuery(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            组装普通文本请求参数。
            </summary>
            <param name="parameters">Key-Value形式请求参数字典</param>
            <returns>URL编码后的请求数据</returns>
        </member>
        <member name="T:Wolf.Infrastructure.Validations.IValidation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.IValidation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Validations.IValidationHandler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.IValidationHandler.Handle(Wolf.Infrastructure.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Wolf.Infrastructure.Validations.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.IValidationRule.Validate">
            <summary>
            验证
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Validations.Validation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.Validation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Validations.ValidationFactory">
            <summary>
            验证工厂
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.ValidationFactory.Create">
            <summary>
            创建验证操作
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wolf.Infrastructure.Validations.ValidationHandler">
            <summary>
            默认验证处理器，直接抛出异常
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.ValidationHandler.Handle(Wolf.Infrastructure.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Wolf.Infrastructure.Validations.ValidationResultCollection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="F:Wolf.Infrastructure.Validations.ValidationResultCollection._results">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Validations.ValidationResultCollection.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:Wolf.Infrastructure.Validations.ValidationResultCollection.Count">
            <summary>
            验证结果个数
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.ValidationResultCollection.#ctor">
            <summary>
            初始化一个<see cref="T:Wolf.Infrastructure.Validations.ValidationResultCollection"/>类型的实例
            </summary>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.ValidationResultCollection.Add(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            添加验证结果
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.ValidationResultCollection.AddList(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            添加验证结果集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.ValidationResultCollection.System#Collections#Generic#IEnumerable{System#ComponentModel#DataAnnotations#ValidationResult}#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wolf.Infrastructure.Validations.ValidationResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
